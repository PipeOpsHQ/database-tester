version: '3.8'

services:
  # Main stress testing service
  stress-test:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080

      # MySQL Configuration
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=StrongPassword123!
      - MYSQL_DATABASE=testdb

      # PostgreSQL Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=StrongPassword123!
      - POSTGRES_DATABASE=testdb
      - POSTGRES_SSLMODE=disable

      # MongoDB Configuration
      - MONGO_URI=mongodb://root:StrongPassword123!@mongo:27017
      - MONGO_DATABASE=testdb

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=StrongPassword123!
      - REDIS_DB=0

      # MSSQL Configuration
      - MSSQL_HOST=mssql
      - MSSQL_PORT=1433
      - MSSQL_USERNAME=sa
      - MSSQL_PASSWORD=StrongPassword123!
      - MSSQL_DATABASE=testdb
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      mssql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - stress-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: stress-test-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: StrongPassword123!
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: StrongPassword123!
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts/mysql:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - stress-test-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pStrongPassword123!"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stress-test-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: StrongPassword123!
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - stress-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: stress-test-mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: StrongPassword123!
      MONGO_INITDB_DATABASE: testdb
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./init-scripts/mongo:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - stress-test-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    command: mongod --auth --bind_ip_all

  # Redis Database
  redis:
    image: redis:7-alpine
    container_name: stress-test-redis
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: StrongPassword123!
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - stress-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "StrongPassword123!", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    command: redis-server --requirepass StrongPassword123! --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Microsoft SQL Server
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: stress-test-mssql
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: StrongPassword123!
      MSSQL_PID: Developer
    volumes:
      - mssql_data:/var/opt/mssql
      - ./init-scripts/mssql:/var/opt/mssql/scripts
    restart: unless-stopped
    networks:
      - stress-test-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P StrongPassword123! -Q 'SELECT 1' -b -o /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: stress-test-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - stress-test
    restart: unless-stopped
    networks:
      - stress-test-network
    profiles:
      - production

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: stress-test-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - stress-test-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: stress-test-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=StrongPassword123!
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - stress-test-network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  mysql_data:
    driver: local
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  redis_data:
    driver: local
  mssql_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  stress-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
